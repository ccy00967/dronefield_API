"""
Django settings for dronefieldrestapi project.

Generated by 'django-admin startproject' using Django 4.2.11.
"""

import os
from pathlib import Path
from datetime import timedelta
from decouple import config
import json
from django.core.exceptions import ImproperlyConfigured
import boto3
from django.core.files.storage import default_storage
from storages.backends.s3boto3 import S3Boto3Storage
from django.core.files.base import ContentFile

# ===========================
# 경로 설정
# ===========================
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent.parent


# ===========================
# 환경 설정 (.env)
# ===========================
SECRET_KEY = config("SECRET_KEY")
DATABASES_HOST = config("DATABASES_HOST", default="localhost")
DATABASES_PORT = config("PORT", default="5432")

# ===========================
# 이메일 설정
# ===========================
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.naver.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# ===========================
# 기본 설정
# ===========================
DEBUG = True
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split(",")

# ===========================
# 애플리케이션 정의
# ===========================
INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admin",
    # 서드파티 앱
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "storages",
    # 내부 앱
    "user",
    "exterminator",
    "trade",
    "common",
    "payments",
    "farmer",
    "core",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ===========================
# URL 및 WSGI 설정
# ===========================
ROOT_URLCONF = "main.urls"
WSGI_APPLICATION = "core.wsgi.application"

# ===========================
# 템플릿 설정
# ===========================
TEMPLATES_DIR = os.path.join(BASE_DIR, "static")
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR, os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ===========================
# 데이터베이스 설정
# ===========================
DATABASES = {
    "default": {
        "ENGINE": config("DATABASES_ENGINE", default="django.db.backends.postgresql"),
        "NAME": config("DATABASES_NAME"),
        "USER": config("DATABASES_USER"),
        "PASSWORD": config("DATABASES_PASSWORD"),
        "HOST": config("DATABASES_HOST", default="localhost"),
        "PORT": config("DATABASES_PORT", default=5432, cast=int),
    }
}
# ===========================
# 비밀번호 검증
# ===========================
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# ===========================
# 국제화 및 지역화
# ===========================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = False


# ===========================
# 사용자 모델
# ===========================
AUTH_USER_MODEL = "user.CustomUser"


# ===========================
# DRF 및 JWT 설정
# ===========================
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}


# ===========================
# 세션 및 CSRF 설정
# ===========================
SESSION_COOKIE_AGE = 900
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True #TODO: 개발환경 세팅

#SESSION_COOKIE_NAME = 'sessionid'
#SESSION_COOKIE_HTTPONLY = False  # JavaScript에서 접근 가능
#SESSION_COOKIE_SAMESITE = 'Lax'

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = None


# ===========================
# CORS 설정
# ===========================
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://localhost:8000",
    "https://dronefield.co.kr",
    "https://dronefield.co.kr:8080",
    "https://api.dronefield.co.kr",
    "https://api.dronefield.co.kr:8080",
]

CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = CORS_ORIGIN_WHITELIST
CSRF_TRUSTED_ORIGINS = CORS_ORIGIN_WHITELIST

CORS_ALLOW_METHODS = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "content-disposition",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# ===========================
# 기본 필드 설정
# ===========================
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#==============================
# 로그인 URL 설정
#==============================
ALIGO_ACCESS_KEY = config("ALIGO_ACCESS_KEY")
ALIGO_ACCESS_ID = config("ALIGO_ACCESS_ID")
ALIGO_SENDER = config("ALIGO_SENDER")

# ===========================
# vwolrd API 설정
# ===========================
CONSUMER_KEY = config("CONSUMER_KEY")
CONSUMER_SECRET = config("CONSUMER_SECRET")

# ===========================
# S3 설정
# ===========================

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', 'ap-northeast-2')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'


MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
MEDIA_ROOT = '/media/'
STATIC_URL  = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
STATIC_ROOT = '/static/'

import logging

# 로거 설정
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)  # 로그 레벨 설정

# S3 설정을 로그로 출력
logger.debug(f"DEFAULT_FILE_STORAGE: {DEFAULT_FILE_STORAGE}")
if 'AWS_ACCESS_KEY_ID' in globals():
    logger.debug(f"AWS_ACCESS_KEY_ID: {AWS_ACCESS_KEY_ID}")
if 'AWS_SECRET_ACCESS_KEY' in globals():
    logger.debug(f"AWS_SECRET_ACCESS_KEY: {AWS_SECRET_ACCESS_KEY}")
if 'AWS_STORAGE_BUCKET_NAME' in globals():
    logger.debug(f"AWS_STORAGE_BUCKET_NAME: {AWS_STORAGE_BUCKET_NAME}")
if 'AWS_S3_REGION_NAME' in globals():
    logger.debug(f"AWS_S3_REGION_NAME: {AWS_S3_REGION_NAME}")
if 'AWS_S3_CUSTOM_DOMAIN' in globals():
    logger.debug(f"AWS_S3_CUSTOM_DOMAIN: {AWS_S3_CUSTOM_DOMAIN}")
    
    
#from django.conf import settings
#from django.utils.module_loading import import_string

# Import S3 Storage Class
#storage_class = import_string(settings.DEFAULT_FILE_STORAGE)
#default_storage = storage_class()

# print("==============s3================")
# print(f"DEFAULT_FILE_STORAGE: {settings.DEFAULT_FILE_STORAGE}")
# print(f"Default storage: {default_storage}")
# print("==============s3================")
# from django.core.files.storage import default_storage

# # 테스트 파일 업로드
# with default_storage.open('test.txt', 'w') as file:
#     file.write('Hello, S3!')

# print("File uploaded to S3")
